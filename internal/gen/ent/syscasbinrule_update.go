// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/wanhello/omgind/internal/gen/ent/predicate"
	"github.com/wanhello/omgind/internal/gen/ent/syscasbinrule"
)

// SysCasbinRuleUpdate is the builder for updating SysCasbinRule entities.
type SysCasbinRuleUpdate struct {
	config
	hooks    []Hook
	mutation *SysCasbinRuleMutation
}

// Where adds a new predicate for the SysCasbinRuleUpdate builder.
func (scru *SysCasbinRuleUpdate) Where(ps ...predicate.SysCasbinRule) *SysCasbinRuleUpdate {
	scru.mutation.predicates = append(scru.mutation.predicates, ps...)
	return scru
}

// SetIsDel sets the "is_del" field.
func (scru *SysCasbinRuleUpdate) SetIsDel(b bool) *SysCasbinRuleUpdate {
	scru.mutation.SetIsDel(b)
	return scru
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (scru *SysCasbinRuleUpdate) SetNillableIsDel(b *bool) *SysCasbinRuleUpdate {
	if b != nil {
		scru.SetIsDel(*b)
	}
	return scru
}

// SetSort sets the "sort" field.
func (scru *SysCasbinRuleUpdate) SetSort(i int32) *SysCasbinRuleUpdate {
	scru.mutation.ResetSort()
	scru.mutation.SetSort(i)
	return scru
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (scru *SysCasbinRuleUpdate) SetNillableSort(i *int32) *SysCasbinRuleUpdate {
	if i != nil {
		scru.SetSort(*i)
	}
	return scru
}

// AddSort adds i to the "sort" field.
func (scru *SysCasbinRuleUpdate) AddSort(i int32) *SysCasbinRuleUpdate {
	scru.mutation.AddSort(i)
	return scru
}

// SetUpdatedAt sets the "updated_at" field.
func (scru *SysCasbinRuleUpdate) SetUpdatedAt(t time.Time) *SysCasbinRuleUpdate {
	scru.mutation.SetUpdatedAt(t)
	return scru
}

// SetDeletedAt sets the "deleted_at" field.
func (scru *SysCasbinRuleUpdate) SetDeletedAt(t time.Time) *SysCasbinRuleUpdate {
	scru.mutation.SetDeletedAt(t)
	return scru
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (scru *SysCasbinRuleUpdate) SetNillableDeletedAt(t *time.Time) *SysCasbinRuleUpdate {
	if t != nil {
		scru.SetDeletedAt(*t)
	}
	return scru
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (scru *SysCasbinRuleUpdate) ClearDeletedAt() *SysCasbinRuleUpdate {
	scru.mutation.ClearDeletedAt()
	return scru
}

// SetPType sets the "PType" field.
func (scru *SysCasbinRuleUpdate) SetPType(s string) *SysCasbinRuleUpdate {
	scru.mutation.SetPType(s)
	return scru
}

// SetNillablePType sets the "PType" field if the given value is not nil.
func (scru *SysCasbinRuleUpdate) SetNillablePType(s *string) *SysCasbinRuleUpdate {
	if s != nil {
		scru.SetPType(*s)
	}
	return scru
}

// ClearPType clears the value of the "PType" field.
func (scru *SysCasbinRuleUpdate) ClearPType() *SysCasbinRuleUpdate {
	scru.mutation.ClearPType()
	return scru
}

// SetRoleID sets the "RoleID" field.
func (scru *SysCasbinRuleUpdate) SetRoleID(s string) *SysCasbinRuleUpdate {
	scru.mutation.SetRoleID(s)
	return scru
}

// SetNillableRoleID sets the "RoleID" field if the given value is not nil.
func (scru *SysCasbinRuleUpdate) SetNillableRoleID(s *string) *SysCasbinRuleUpdate {
	if s != nil {
		scru.SetRoleID(*s)
	}
	return scru
}

// ClearRoleID clears the value of the "RoleID" field.
func (scru *SysCasbinRuleUpdate) ClearRoleID() *SysCasbinRuleUpdate {
	scru.mutation.ClearRoleID()
	return scru
}

// SetPath sets the "Path" field.
func (scru *SysCasbinRuleUpdate) SetPath(s string) *SysCasbinRuleUpdate {
	scru.mutation.SetPath(s)
	return scru
}

// SetNillablePath sets the "Path" field if the given value is not nil.
func (scru *SysCasbinRuleUpdate) SetNillablePath(s *string) *SysCasbinRuleUpdate {
	if s != nil {
		scru.SetPath(*s)
	}
	return scru
}

// ClearPath clears the value of the "Path" field.
func (scru *SysCasbinRuleUpdate) ClearPath() *SysCasbinRuleUpdate {
	scru.mutation.ClearPath()
	return scru
}

// SetMethod sets the "Method" field.
func (scru *SysCasbinRuleUpdate) SetMethod(s string) *SysCasbinRuleUpdate {
	scru.mutation.SetMethod(s)
	return scru
}

// SetNillableMethod sets the "Method" field if the given value is not nil.
func (scru *SysCasbinRuleUpdate) SetNillableMethod(s *string) *SysCasbinRuleUpdate {
	if s != nil {
		scru.SetMethod(*s)
	}
	return scru
}

// ClearMethod clears the value of the "Method" field.
func (scru *SysCasbinRuleUpdate) ClearMethod() *SysCasbinRuleUpdate {
	scru.mutation.ClearMethod()
	return scru
}

// SetV3 sets the "v3" field.
func (scru *SysCasbinRuleUpdate) SetV3(s string) *SysCasbinRuleUpdate {
	scru.mutation.SetV3(s)
	return scru
}

// SetNillableV3 sets the "v3" field if the given value is not nil.
func (scru *SysCasbinRuleUpdate) SetNillableV3(s *string) *SysCasbinRuleUpdate {
	if s != nil {
		scru.SetV3(*s)
	}
	return scru
}

// ClearV3 clears the value of the "v3" field.
func (scru *SysCasbinRuleUpdate) ClearV3() *SysCasbinRuleUpdate {
	scru.mutation.ClearV3()
	return scru
}

// SetV4 sets the "v4" field.
func (scru *SysCasbinRuleUpdate) SetV4(s string) *SysCasbinRuleUpdate {
	scru.mutation.SetV4(s)
	return scru
}

// SetNillableV4 sets the "v4" field if the given value is not nil.
func (scru *SysCasbinRuleUpdate) SetNillableV4(s *string) *SysCasbinRuleUpdate {
	if s != nil {
		scru.SetV4(*s)
	}
	return scru
}

// ClearV4 clears the value of the "v4" field.
func (scru *SysCasbinRuleUpdate) ClearV4() *SysCasbinRuleUpdate {
	scru.mutation.ClearV4()
	return scru
}

// SetV5 sets the "v5" field.
func (scru *SysCasbinRuleUpdate) SetV5(s string) *SysCasbinRuleUpdate {
	scru.mutation.SetV5(s)
	return scru
}

// SetNillableV5 sets the "v5" field if the given value is not nil.
func (scru *SysCasbinRuleUpdate) SetNillableV5(s *string) *SysCasbinRuleUpdate {
	if s != nil {
		scru.SetV5(*s)
	}
	return scru
}

// ClearV5 clears the value of the "v5" field.
func (scru *SysCasbinRuleUpdate) ClearV5() *SysCasbinRuleUpdate {
	scru.mutation.ClearV5()
	return scru
}

// Mutation returns the SysCasbinRuleMutation object of the builder.
func (scru *SysCasbinRuleUpdate) Mutation() *SysCasbinRuleMutation {
	return scru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (scru *SysCasbinRuleUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	scru.defaults()
	if len(scru.hooks) == 0 {
		if err = scru.check(); err != nil {
			return 0, err
		}
		affected, err = scru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SysCasbinRuleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = scru.check(); err != nil {
				return 0, err
			}
			scru.mutation = mutation
			affected, err = scru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(scru.hooks) - 1; i >= 0; i-- {
			mut = scru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, scru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (scru *SysCasbinRuleUpdate) SaveX(ctx context.Context) int {
	affected, err := scru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (scru *SysCasbinRuleUpdate) Exec(ctx context.Context) error {
	_, err := scru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scru *SysCasbinRuleUpdate) ExecX(ctx context.Context) {
	if err := scru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (scru *SysCasbinRuleUpdate) defaults() {
	if _, ok := scru.mutation.UpdatedAt(); !ok {
		v := syscasbinrule.UpdateDefaultUpdatedAt()
		scru.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scru *SysCasbinRuleUpdate) check() error {
	if v, ok := scru.mutation.PType(); ok {
		if err := syscasbinrule.PTypeValidator(v); err != nil {
			return &ValidationError{Name: "PType", err: fmt.Errorf("ent: validator failed for field \"PType\": %w", err)}
		}
	}
	if v, ok := scru.mutation.RoleID(); ok {
		if err := syscasbinrule.RoleIDValidator(v); err != nil {
			return &ValidationError{Name: "RoleID", err: fmt.Errorf("ent: validator failed for field \"RoleID\": %w", err)}
		}
	}
	if v, ok := scru.mutation.Path(); ok {
		if err := syscasbinrule.PathValidator(v); err != nil {
			return &ValidationError{Name: "Path", err: fmt.Errorf("ent: validator failed for field \"Path\": %w", err)}
		}
	}
	if v, ok := scru.mutation.Method(); ok {
		if err := syscasbinrule.MethodValidator(v); err != nil {
			return &ValidationError{Name: "Method", err: fmt.Errorf("ent: validator failed for field \"Method\": %w", err)}
		}
	}
	if v, ok := scru.mutation.V3(); ok {
		if err := syscasbinrule.V3Validator(v); err != nil {
			return &ValidationError{Name: "v3", err: fmt.Errorf("ent: validator failed for field \"v3\": %w", err)}
		}
	}
	if v, ok := scru.mutation.V4(); ok {
		if err := syscasbinrule.V4Validator(v); err != nil {
			return &ValidationError{Name: "v4", err: fmt.Errorf("ent: validator failed for field \"v4\": %w", err)}
		}
	}
	if v, ok := scru.mutation.V5(); ok {
		if err := syscasbinrule.V5Validator(v); err != nil {
			return &ValidationError{Name: "v5", err: fmt.Errorf("ent: validator failed for field \"v5\": %w", err)}
		}
	}
	return nil
}

func (scru *SysCasbinRuleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   syscasbinrule.Table,
			Columns: syscasbinrule.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: syscasbinrule.FieldID,
			},
		},
	}
	if ps := scru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := scru.mutation.IsDel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: syscasbinrule.FieldIsDel,
		})
	}
	if value, ok := scru.mutation.Sort(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: syscasbinrule.FieldSort,
		})
	}
	if value, ok := scru.mutation.AddedSort(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: syscasbinrule.FieldSort,
		})
	}
	if value, ok := scru.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: syscasbinrule.FieldUpdatedAt,
		})
	}
	if value, ok := scru.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: syscasbinrule.FieldDeletedAt,
		})
	}
	if scru.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: syscasbinrule.FieldDeletedAt,
		})
	}
	if value, ok := scru.mutation.PType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: syscasbinrule.FieldPType,
		})
	}
	if scru.mutation.PTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: syscasbinrule.FieldPType,
		})
	}
	if value, ok := scru.mutation.RoleID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: syscasbinrule.FieldRoleID,
		})
	}
	if scru.mutation.RoleIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: syscasbinrule.FieldRoleID,
		})
	}
	if value, ok := scru.mutation.Path(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: syscasbinrule.FieldPath,
		})
	}
	if scru.mutation.PathCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: syscasbinrule.FieldPath,
		})
	}
	if value, ok := scru.mutation.Method(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: syscasbinrule.FieldMethod,
		})
	}
	if scru.mutation.MethodCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: syscasbinrule.FieldMethod,
		})
	}
	if value, ok := scru.mutation.V3(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: syscasbinrule.FieldV3,
		})
	}
	if scru.mutation.V3Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: syscasbinrule.FieldV3,
		})
	}
	if value, ok := scru.mutation.V4(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: syscasbinrule.FieldV4,
		})
	}
	if scru.mutation.V4Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: syscasbinrule.FieldV4,
		})
	}
	if value, ok := scru.mutation.V5(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: syscasbinrule.FieldV5,
		})
	}
	if scru.mutation.V5Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: syscasbinrule.FieldV5,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, scru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{syscasbinrule.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// SysCasbinRuleUpdateOne is the builder for updating a single SysCasbinRule entity.
type SysCasbinRuleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SysCasbinRuleMutation
}

// SetIsDel sets the "is_del" field.
func (scruo *SysCasbinRuleUpdateOne) SetIsDel(b bool) *SysCasbinRuleUpdateOne {
	scruo.mutation.SetIsDel(b)
	return scruo
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (scruo *SysCasbinRuleUpdateOne) SetNillableIsDel(b *bool) *SysCasbinRuleUpdateOne {
	if b != nil {
		scruo.SetIsDel(*b)
	}
	return scruo
}

// SetSort sets the "sort" field.
func (scruo *SysCasbinRuleUpdateOne) SetSort(i int32) *SysCasbinRuleUpdateOne {
	scruo.mutation.ResetSort()
	scruo.mutation.SetSort(i)
	return scruo
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (scruo *SysCasbinRuleUpdateOne) SetNillableSort(i *int32) *SysCasbinRuleUpdateOne {
	if i != nil {
		scruo.SetSort(*i)
	}
	return scruo
}

// AddSort adds i to the "sort" field.
func (scruo *SysCasbinRuleUpdateOne) AddSort(i int32) *SysCasbinRuleUpdateOne {
	scruo.mutation.AddSort(i)
	return scruo
}

// SetUpdatedAt sets the "updated_at" field.
func (scruo *SysCasbinRuleUpdateOne) SetUpdatedAt(t time.Time) *SysCasbinRuleUpdateOne {
	scruo.mutation.SetUpdatedAt(t)
	return scruo
}

// SetDeletedAt sets the "deleted_at" field.
func (scruo *SysCasbinRuleUpdateOne) SetDeletedAt(t time.Time) *SysCasbinRuleUpdateOne {
	scruo.mutation.SetDeletedAt(t)
	return scruo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (scruo *SysCasbinRuleUpdateOne) SetNillableDeletedAt(t *time.Time) *SysCasbinRuleUpdateOne {
	if t != nil {
		scruo.SetDeletedAt(*t)
	}
	return scruo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (scruo *SysCasbinRuleUpdateOne) ClearDeletedAt() *SysCasbinRuleUpdateOne {
	scruo.mutation.ClearDeletedAt()
	return scruo
}

// SetPType sets the "PType" field.
func (scruo *SysCasbinRuleUpdateOne) SetPType(s string) *SysCasbinRuleUpdateOne {
	scruo.mutation.SetPType(s)
	return scruo
}

// SetNillablePType sets the "PType" field if the given value is not nil.
func (scruo *SysCasbinRuleUpdateOne) SetNillablePType(s *string) *SysCasbinRuleUpdateOne {
	if s != nil {
		scruo.SetPType(*s)
	}
	return scruo
}

// ClearPType clears the value of the "PType" field.
func (scruo *SysCasbinRuleUpdateOne) ClearPType() *SysCasbinRuleUpdateOne {
	scruo.mutation.ClearPType()
	return scruo
}

// SetRoleID sets the "RoleID" field.
func (scruo *SysCasbinRuleUpdateOne) SetRoleID(s string) *SysCasbinRuleUpdateOne {
	scruo.mutation.SetRoleID(s)
	return scruo
}

// SetNillableRoleID sets the "RoleID" field if the given value is not nil.
func (scruo *SysCasbinRuleUpdateOne) SetNillableRoleID(s *string) *SysCasbinRuleUpdateOne {
	if s != nil {
		scruo.SetRoleID(*s)
	}
	return scruo
}

// ClearRoleID clears the value of the "RoleID" field.
func (scruo *SysCasbinRuleUpdateOne) ClearRoleID() *SysCasbinRuleUpdateOne {
	scruo.mutation.ClearRoleID()
	return scruo
}

// SetPath sets the "Path" field.
func (scruo *SysCasbinRuleUpdateOne) SetPath(s string) *SysCasbinRuleUpdateOne {
	scruo.mutation.SetPath(s)
	return scruo
}

// SetNillablePath sets the "Path" field if the given value is not nil.
func (scruo *SysCasbinRuleUpdateOne) SetNillablePath(s *string) *SysCasbinRuleUpdateOne {
	if s != nil {
		scruo.SetPath(*s)
	}
	return scruo
}

// ClearPath clears the value of the "Path" field.
func (scruo *SysCasbinRuleUpdateOne) ClearPath() *SysCasbinRuleUpdateOne {
	scruo.mutation.ClearPath()
	return scruo
}

// SetMethod sets the "Method" field.
func (scruo *SysCasbinRuleUpdateOne) SetMethod(s string) *SysCasbinRuleUpdateOne {
	scruo.mutation.SetMethod(s)
	return scruo
}

// SetNillableMethod sets the "Method" field if the given value is not nil.
func (scruo *SysCasbinRuleUpdateOne) SetNillableMethod(s *string) *SysCasbinRuleUpdateOne {
	if s != nil {
		scruo.SetMethod(*s)
	}
	return scruo
}

// ClearMethod clears the value of the "Method" field.
func (scruo *SysCasbinRuleUpdateOne) ClearMethod() *SysCasbinRuleUpdateOne {
	scruo.mutation.ClearMethod()
	return scruo
}

// SetV3 sets the "v3" field.
func (scruo *SysCasbinRuleUpdateOne) SetV3(s string) *SysCasbinRuleUpdateOne {
	scruo.mutation.SetV3(s)
	return scruo
}

// SetNillableV3 sets the "v3" field if the given value is not nil.
func (scruo *SysCasbinRuleUpdateOne) SetNillableV3(s *string) *SysCasbinRuleUpdateOne {
	if s != nil {
		scruo.SetV3(*s)
	}
	return scruo
}

// ClearV3 clears the value of the "v3" field.
func (scruo *SysCasbinRuleUpdateOne) ClearV3() *SysCasbinRuleUpdateOne {
	scruo.mutation.ClearV3()
	return scruo
}

// SetV4 sets the "v4" field.
func (scruo *SysCasbinRuleUpdateOne) SetV4(s string) *SysCasbinRuleUpdateOne {
	scruo.mutation.SetV4(s)
	return scruo
}

// SetNillableV4 sets the "v4" field if the given value is not nil.
func (scruo *SysCasbinRuleUpdateOne) SetNillableV4(s *string) *SysCasbinRuleUpdateOne {
	if s != nil {
		scruo.SetV4(*s)
	}
	return scruo
}

// ClearV4 clears the value of the "v4" field.
func (scruo *SysCasbinRuleUpdateOne) ClearV4() *SysCasbinRuleUpdateOne {
	scruo.mutation.ClearV4()
	return scruo
}

// SetV5 sets the "v5" field.
func (scruo *SysCasbinRuleUpdateOne) SetV5(s string) *SysCasbinRuleUpdateOne {
	scruo.mutation.SetV5(s)
	return scruo
}

// SetNillableV5 sets the "v5" field if the given value is not nil.
func (scruo *SysCasbinRuleUpdateOne) SetNillableV5(s *string) *SysCasbinRuleUpdateOne {
	if s != nil {
		scruo.SetV5(*s)
	}
	return scruo
}

// ClearV5 clears the value of the "v5" field.
func (scruo *SysCasbinRuleUpdateOne) ClearV5() *SysCasbinRuleUpdateOne {
	scruo.mutation.ClearV5()
	return scruo
}

// Mutation returns the SysCasbinRuleMutation object of the builder.
func (scruo *SysCasbinRuleUpdateOne) Mutation() *SysCasbinRuleMutation {
	return scruo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (scruo *SysCasbinRuleUpdateOne) Select(field string, fields ...string) *SysCasbinRuleUpdateOne {
	scruo.fields = append([]string{field}, fields...)
	return scruo
}

// Save executes the query and returns the updated SysCasbinRule entity.
func (scruo *SysCasbinRuleUpdateOne) Save(ctx context.Context) (*SysCasbinRule, error) {
	var (
		err  error
		node *SysCasbinRule
	)
	scruo.defaults()
	if len(scruo.hooks) == 0 {
		if err = scruo.check(); err != nil {
			return nil, err
		}
		node, err = scruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SysCasbinRuleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = scruo.check(); err != nil {
				return nil, err
			}
			scruo.mutation = mutation
			node, err = scruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(scruo.hooks) - 1; i >= 0; i-- {
			mut = scruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, scruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (scruo *SysCasbinRuleUpdateOne) SaveX(ctx context.Context) *SysCasbinRule {
	node, err := scruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (scruo *SysCasbinRuleUpdateOne) Exec(ctx context.Context) error {
	_, err := scruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scruo *SysCasbinRuleUpdateOne) ExecX(ctx context.Context) {
	if err := scruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (scruo *SysCasbinRuleUpdateOne) defaults() {
	if _, ok := scruo.mutation.UpdatedAt(); !ok {
		v := syscasbinrule.UpdateDefaultUpdatedAt()
		scruo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scruo *SysCasbinRuleUpdateOne) check() error {
	if v, ok := scruo.mutation.PType(); ok {
		if err := syscasbinrule.PTypeValidator(v); err != nil {
			return &ValidationError{Name: "PType", err: fmt.Errorf("ent: validator failed for field \"PType\": %w", err)}
		}
	}
	if v, ok := scruo.mutation.RoleID(); ok {
		if err := syscasbinrule.RoleIDValidator(v); err != nil {
			return &ValidationError{Name: "RoleID", err: fmt.Errorf("ent: validator failed for field \"RoleID\": %w", err)}
		}
	}
	if v, ok := scruo.mutation.Path(); ok {
		if err := syscasbinrule.PathValidator(v); err != nil {
			return &ValidationError{Name: "Path", err: fmt.Errorf("ent: validator failed for field \"Path\": %w", err)}
		}
	}
	if v, ok := scruo.mutation.Method(); ok {
		if err := syscasbinrule.MethodValidator(v); err != nil {
			return &ValidationError{Name: "Method", err: fmt.Errorf("ent: validator failed for field \"Method\": %w", err)}
		}
	}
	if v, ok := scruo.mutation.V3(); ok {
		if err := syscasbinrule.V3Validator(v); err != nil {
			return &ValidationError{Name: "v3", err: fmt.Errorf("ent: validator failed for field \"v3\": %w", err)}
		}
	}
	if v, ok := scruo.mutation.V4(); ok {
		if err := syscasbinrule.V4Validator(v); err != nil {
			return &ValidationError{Name: "v4", err: fmt.Errorf("ent: validator failed for field \"v4\": %w", err)}
		}
	}
	if v, ok := scruo.mutation.V5(); ok {
		if err := syscasbinrule.V5Validator(v); err != nil {
			return &ValidationError{Name: "v5", err: fmt.Errorf("ent: validator failed for field \"v5\": %w", err)}
		}
	}
	return nil
}

func (scruo *SysCasbinRuleUpdateOne) sqlSave(ctx context.Context) (_node *SysCasbinRule, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   syscasbinrule.Table,
			Columns: syscasbinrule.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: syscasbinrule.FieldID,
			},
		},
	}
	id, ok := scruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing SysCasbinRule.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := scruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, syscasbinrule.FieldID)
		for _, f := range fields {
			if !syscasbinrule.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != syscasbinrule.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := scruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := scruo.mutation.IsDel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: syscasbinrule.FieldIsDel,
		})
	}
	if value, ok := scruo.mutation.Sort(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: syscasbinrule.FieldSort,
		})
	}
	if value, ok := scruo.mutation.AddedSort(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: syscasbinrule.FieldSort,
		})
	}
	if value, ok := scruo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: syscasbinrule.FieldUpdatedAt,
		})
	}
	if value, ok := scruo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: syscasbinrule.FieldDeletedAt,
		})
	}
	if scruo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: syscasbinrule.FieldDeletedAt,
		})
	}
	if value, ok := scruo.mutation.PType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: syscasbinrule.FieldPType,
		})
	}
	if scruo.mutation.PTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: syscasbinrule.FieldPType,
		})
	}
	if value, ok := scruo.mutation.RoleID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: syscasbinrule.FieldRoleID,
		})
	}
	if scruo.mutation.RoleIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: syscasbinrule.FieldRoleID,
		})
	}
	if value, ok := scruo.mutation.Path(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: syscasbinrule.FieldPath,
		})
	}
	if scruo.mutation.PathCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: syscasbinrule.FieldPath,
		})
	}
	if value, ok := scruo.mutation.Method(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: syscasbinrule.FieldMethod,
		})
	}
	if scruo.mutation.MethodCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: syscasbinrule.FieldMethod,
		})
	}
	if value, ok := scruo.mutation.V3(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: syscasbinrule.FieldV3,
		})
	}
	if scruo.mutation.V3Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: syscasbinrule.FieldV3,
		})
	}
	if value, ok := scruo.mutation.V4(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: syscasbinrule.FieldV4,
		})
	}
	if scruo.mutation.V4Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: syscasbinrule.FieldV4,
		})
	}
	if value, ok := scruo.mutation.V5(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: syscasbinrule.FieldV5,
		})
	}
	if scruo.mutation.V5Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: syscasbinrule.FieldV5,
		})
	}
	_node = &SysCasbinRule{config: scruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, scruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{syscasbinrule.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
