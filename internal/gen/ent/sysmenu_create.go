// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/wanhello/omgind/internal/gen/ent/sysmenu"
)

// SysMenuCreate is the builder for creating a SysMenu entity.
type SysMenuCreate struct {
	config
	mutation *SysMenuMutation
	hooks    []Hook
}

// Mutation returns the SysMenuMutation object of the builder.
func (smc *SysMenuCreate) Mutation() *SysMenuMutation {
	return smc.mutation
}

// Save creates the SysMenu in the database.
func (smc *SysMenuCreate) Save(ctx context.Context) (*SysMenu, error) {
	var (
		err  error
		node *SysMenu
	)
	if len(smc.hooks) == 0 {
		if err = smc.check(); err != nil {
			return nil, err
		}
		node, err = smc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SysMenuMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = smc.check(); err != nil {
				return nil, err
			}
			smc.mutation = mutation
			node, err = smc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(smc.hooks) - 1; i >= 0; i-- {
			mut = smc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, smc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (smc *SysMenuCreate) SaveX(ctx context.Context) *SysMenu {
	v, err := smc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (smc *SysMenuCreate) check() error {
	return nil
}

func (smc *SysMenuCreate) sqlSave(ctx context.Context) (*SysMenu, error) {
	_node, _spec := smc.createSpec()
	if err := sqlgraph.CreateNode(ctx, smc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (smc *SysMenuCreate) createSpec() (*SysMenu, *sqlgraph.CreateSpec) {
	var (
		_node = &SysMenu{config: smc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: sysmenu.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: sysmenu.FieldID,
			},
		}
	)
	return _node, _spec
}

// SysMenuCreateBulk is the builder for creating many SysMenu entities in bulk.
type SysMenuCreateBulk struct {
	config
	builders []*SysMenuCreate
}

// Save creates the SysMenu entities in the database.
func (smcb *SysMenuCreateBulk) Save(ctx context.Context) ([]*SysMenu, error) {
	specs := make([]*sqlgraph.CreateSpec, len(smcb.builders))
	nodes := make([]*SysMenu, len(smcb.builders))
	mutators := make([]Mutator, len(smcb.builders))
	for i := range smcb.builders {
		func(i int, root context.Context) {
			builder := smcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SysMenuMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, smcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, smcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, smcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (smcb *SysMenuCreateBulk) SaveX(ctx context.Context) []*SysMenu {
	v, err := smcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
