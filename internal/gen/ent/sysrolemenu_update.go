// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/wanhello/omgind/internal/gen/ent/predicate"
	"github.com/wanhello/omgind/internal/gen/ent/sysrolemenu"
)

// SysRoleMenuUpdate is the builder for updating SysRoleMenu entities.
type SysRoleMenuUpdate struct {
	config
	hooks    []Hook
	mutation *SysRoleMenuMutation
}

// Where adds a new predicate for the SysRoleMenuUpdate builder.
func (srmu *SysRoleMenuUpdate) Where(ps ...predicate.SysRoleMenu) *SysRoleMenuUpdate {
	srmu.mutation.predicates = append(srmu.mutation.predicates, ps...)
	return srmu
}

// Mutation returns the SysRoleMenuMutation object of the builder.
func (srmu *SysRoleMenuUpdate) Mutation() *SysRoleMenuMutation {
	return srmu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (srmu *SysRoleMenuUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(srmu.hooks) == 0 {
		affected, err = srmu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SysRoleMenuMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			srmu.mutation = mutation
			affected, err = srmu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(srmu.hooks) - 1; i >= 0; i-- {
			mut = srmu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, srmu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (srmu *SysRoleMenuUpdate) SaveX(ctx context.Context) int {
	affected, err := srmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (srmu *SysRoleMenuUpdate) Exec(ctx context.Context) error {
	_, err := srmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (srmu *SysRoleMenuUpdate) ExecX(ctx context.Context) {
	if err := srmu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (srmu *SysRoleMenuUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   sysrolemenu.Table,
			Columns: sysrolemenu.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: sysrolemenu.FieldID,
			},
		},
	}
	if ps := srmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if n, err = sqlgraph.UpdateNodes(ctx, srmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sysrolemenu.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// SysRoleMenuUpdateOne is the builder for updating a single SysRoleMenu entity.
type SysRoleMenuUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SysRoleMenuMutation
}

// Mutation returns the SysRoleMenuMutation object of the builder.
func (srmuo *SysRoleMenuUpdateOne) Mutation() *SysRoleMenuMutation {
	return srmuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (srmuo *SysRoleMenuUpdateOne) Select(field string, fields ...string) *SysRoleMenuUpdateOne {
	srmuo.fields = append([]string{field}, fields...)
	return srmuo
}

// Save executes the query and returns the updated SysRoleMenu entity.
func (srmuo *SysRoleMenuUpdateOne) Save(ctx context.Context) (*SysRoleMenu, error) {
	var (
		err  error
		node *SysRoleMenu
	)
	if len(srmuo.hooks) == 0 {
		node, err = srmuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SysRoleMenuMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			srmuo.mutation = mutation
			node, err = srmuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(srmuo.hooks) - 1; i >= 0; i-- {
			mut = srmuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, srmuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (srmuo *SysRoleMenuUpdateOne) SaveX(ctx context.Context) *SysRoleMenu {
	node, err := srmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (srmuo *SysRoleMenuUpdateOne) Exec(ctx context.Context) error {
	_, err := srmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (srmuo *SysRoleMenuUpdateOne) ExecX(ctx context.Context) {
	if err := srmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (srmuo *SysRoleMenuUpdateOne) sqlSave(ctx context.Context) (_node *SysRoleMenu, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   sysrolemenu.Table,
			Columns: sysrolemenu.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: sysrolemenu.FieldID,
			},
		},
	}
	id, ok := srmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing SysRoleMenu.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := srmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sysrolemenu.FieldID)
		for _, f := range fields {
			if !sysrolemenu.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sysrolemenu.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := srmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	_node = &SysRoleMenu{config: srmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, srmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sysrolemenu.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
