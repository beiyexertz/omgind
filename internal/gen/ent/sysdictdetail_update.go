// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/wanhello/omgind/internal/gen/ent/predicate"
	"github.com/wanhello/omgind/internal/gen/ent/sysdictdetail"
)

// SysDictDetailUpdate is the builder for updating SysDictDetail entities.
type SysDictDetailUpdate struct {
	config
	hooks    []Hook
	mutation *SysDictDetailMutation
}

// Where adds a new predicate for the SysDictDetailUpdate builder.
func (sddu *SysDictDetailUpdate) Where(ps ...predicate.SysDictDetail) *SysDictDetailUpdate {
	sddu.mutation.predicates = append(sddu.mutation.predicates, ps...)
	return sddu
}

// Mutation returns the SysDictDetailMutation object of the builder.
func (sddu *SysDictDetailUpdate) Mutation() *SysDictDetailMutation {
	return sddu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sddu *SysDictDetailUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(sddu.hooks) == 0 {
		affected, err = sddu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SysDictDetailMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			sddu.mutation = mutation
			affected, err = sddu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(sddu.hooks) - 1; i >= 0; i-- {
			mut = sddu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sddu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (sddu *SysDictDetailUpdate) SaveX(ctx context.Context) int {
	affected, err := sddu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sddu *SysDictDetailUpdate) Exec(ctx context.Context) error {
	_, err := sddu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sddu *SysDictDetailUpdate) ExecX(ctx context.Context) {
	if err := sddu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (sddu *SysDictDetailUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   sysdictdetail.Table,
			Columns: sysdictdetail.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: sysdictdetail.FieldID,
			},
		},
	}
	if ps := sddu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sddu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sysdictdetail.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// SysDictDetailUpdateOne is the builder for updating a single SysDictDetail entity.
type SysDictDetailUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SysDictDetailMutation
}

// Mutation returns the SysDictDetailMutation object of the builder.
func (sdduo *SysDictDetailUpdateOne) Mutation() *SysDictDetailMutation {
	return sdduo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sdduo *SysDictDetailUpdateOne) Select(field string, fields ...string) *SysDictDetailUpdateOne {
	sdduo.fields = append([]string{field}, fields...)
	return sdduo
}

// Save executes the query and returns the updated SysDictDetail entity.
func (sdduo *SysDictDetailUpdateOne) Save(ctx context.Context) (*SysDictDetail, error) {
	var (
		err  error
		node *SysDictDetail
	)
	if len(sdduo.hooks) == 0 {
		node, err = sdduo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SysDictDetailMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			sdduo.mutation = mutation
			node, err = sdduo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(sdduo.hooks) - 1; i >= 0; i-- {
			mut = sdduo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sdduo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (sdduo *SysDictDetailUpdateOne) SaveX(ctx context.Context) *SysDictDetail {
	node, err := sdduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sdduo *SysDictDetailUpdateOne) Exec(ctx context.Context) error {
	_, err := sdduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sdduo *SysDictDetailUpdateOne) ExecX(ctx context.Context) {
	if err := sdduo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (sdduo *SysDictDetailUpdateOne) sqlSave(ctx context.Context) (_node *SysDictDetail, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   sysdictdetail.Table,
			Columns: sysdictdetail.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: sysdictdetail.FieldID,
			},
		},
	}
	id, ok := sdduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing SysDictDetail.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := sdduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sysdictdetail.FieldID)
		for _, f := range fields {
			if !sysdictdetail.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sysdictdetail.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sdduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	_node = &SysDictDetail{config: sdduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sdduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sysdictdetail.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
