// Code generated by entc, DO NOT EDIT.

package syscasbinrule

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/wanhello/omgind/internal/gen/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// IsDel applies equality check predicate on the "is_del" field. It's identical to IsDelEQ.
func IsDel(v bool) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsDel), v))
	})
}

// Sort applies equality check predicate on the "sort" field. It's identical to SortEQ.
func Sort(v int32) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSort), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// PType applies equality check predicate on the "PType" field. It's identical to PTypeEQ.
func PType(v string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPType), v))
	})
}

// RoleID applies equality check predicate on the "RoleID" field. It's identical to RoleIDEQ.
func RoleID(v string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRoleID), v))
	})
}

// Path applies equality check predicate on the "Path" field. It's identical to PathEQ.
func Path(v string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPath), v))
	})
}

// Method applies equality check predicate on the "Method" field. It's identical to MethodEQ.
func Method(v string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMethod), v))
	})
}

// V3 applies equality check predicate on the "v3" field. It's identical to V3EQ.
func V3(v string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldV3), v))
	})
}

// V4 applies equality check predicate on the "v4" field. It's identical to V4EQ.
func V4(v string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldV4), v))
	})
}

// V5 applies equality check predicate on the "v5" field. It's identical to V5EQ.
func V5(v string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldV5), v))
	})
}

// IsDelEQ applies the EQ predicate on the "is_del" field.
func IsDelEQ(v bool) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsDel), v))
	})
}

// IsDelNEQ applies the NEQ predicate on the "is_del" field.
func IsDelNEQ(v bool) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsDel), v))
	})
}

// SortEQ applies the EQ predicate on the "sort" field.
func SortEQ(v int32) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSort), v))
	})
}

// SortNEQ applies the NEQ predicate on the "sort" field.
func SortNEQ(v int32) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSort), v))
	})
}

// SortIn applies the In predicate on the "sort" field.
func SortIn(vs ...int32) predicate.SysCasbinRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSort), v...))
	})
}

// SortNotIn applies the NotIn predicate on the "sort" field.
func SortNotIn(vs ...int32) predicate.SysCasbinRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSort), v...))
	})
}

// SortGT applies the GT predicate on the "sort" field.
func SortGT(v int32) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSort), v))
	})
}

// SortGTE applies the GTE predicate on the "sort" field.
func SortGTE(v int32) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSort), v))
	})
}

// SortLT applies the LT predicate on the "sort" field.
func SortLT(v int32) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSort), v))
	})
}

// SortLTE applies the LTE predicate on the "sort" field.
func SortLTE(v int32) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSort), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.SysCasbinRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.SysCasbinRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.SysCasbinRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.SysCasbinRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.SysCasbinRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.SysCasbinRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeletedAt)))
	})
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeletedAt)))
	})
}

// PTypeEQ applies the EQ predicate on the "PType" field.
func PTypeEQ(v string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPType), v))
	})
}

// PTypeNEQ applies the NEQ predicate on the "PType" field.
func PTypeNEQ(v string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPType), v))
	})
}

// PTypeIn applies the In predicate on the "PType" field.
func PTypeIn(vs ...string) predicate.SysCasbinRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPType), v...))
	})
}

// PTypeNotIn applies the NotIn predicate on the "PType" field.
func PTypeNotIn(vs ...string) predicate.SysCasbinRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPType), v...))
	})
}

// PTypeGT applies the GT predicate on the "PType" field.
func PTypeGT(v string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPType), v))
	})
}

// PTypeGTE applies the GTE predicate on the "PType" field.
func PTypeGTE(v string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPType), v))
	})
}

// PTypeLT applies the LT predicate on the "PType" field.
func PTypeLT(v string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPType), v))
	})
}

// PTypeLTE applies the LTE predicate on the "PType" field.
func PTypeLTE(v string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPType), v))
	})
}

// PTypeContains applies the Contains predicate on the "PType" field.
func PTypeContains(v string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPType), v))
	})
}

// PTypeHasPrefix applies the HasPrefix predicate on the "PType" field.
func PTypeHasPrefix(v string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPType), v))
	})
}

// PTypeHasSuffix applies the HasSuffix predicate on the "PType" field.
func PTypeHasSuffix(v string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPType), v))
	})
}

// PTypeIsNil applies the IsNil predicate on the "PType" field.
func PTypeIsNil() predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPType)))
	})
}

// PTypeNotNil applies the NotNil predicate on the "PType" field.
func PTypeNotNil() predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPType)))
	})
}

// PTypeEqualFold applies the EqualFold predicate on the "PType" field.
func PTypeEqualFold(v string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPType), v))
	})
}

// PTypeContainsFold applies the ContainsFold predicate on the "PType" field.
func PTypeContainsFold(v string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPType), v))
	})
}

// RoleIDEQ applies the EQ predicate on the "RoleID" field.
func RoleIDEQ(v string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRoleID), v))
	})
}

// RoleIDNEQ applies the NEQ predicate on the "RoleID" field.
func RoleIDNEQ(v string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRoleID), v))
	})
}

// RoleIDIn applies the In predicate on the "RoleID" field.
func RoleIDIn(vs ...string) predicate.SysCasbinRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRoleID), v...))
	})
}

// RoleIDNotIn applies the NotIn predicate on the "RoleID" field.
func RoleIDNotIn(vs ...string) predicate.SysCasbinRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRoleID), v...))
	})
}

// RoleIDGT applies the GT predicate on the "RoleID" field.
func RoleIDGT(v string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRoleID), v))
	})
}

// RoleIDGTE applies the GTE predicate on the "RoleID" field.
func RoleIDGTE(v string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRoleID), v))
	})
}

// RoleIDLT applies the LT predicate on the "RoleID" field.
func RoleIDLT(v string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRoleID), v))
	})
}

// RoleIDLTE applies the LTE predicate on the "RoleID" field.
func RoleIDLTE(v string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRoleID), v))
	})
}

// RoleIDContains applies the Contains predicate on the "RoleID" field.
func RoleIDContains(v string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRoleID), v))
	})
}

// RoleIDHasPrefix applies the HasPrefix predicate on the "RoleID" field.
func RoleIDHasPrefix(v string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRoleID), v))
	})
}

// RoleIDHasSuffix applies the HasSuffix predicate on the "RoleID" field.
func RoleIDHasSuffix(v string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRoleID), v))
	})
}

// RoleIDIsNil applies the IsNil predicate on the "RoleID" field.
func RoleIDIsNil() predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRoleID)))
	})
}

// RoleIDNotNil applies the NotNil predicate on the "RoleID" field.
func RoleIDNotNil() predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRoleID)))
	})
}

// RoleIDEqualFold applies the EqualFold predicate on the "RoleID" field.
func RoleIDEqualFold(v string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRoleID), v))
	})
}

// RoleIDContainsFold applies the ContainsFold predicate on the "RoleID" field.
func RoleIDContainsFold(v string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRoleID), v))
	})
}

// PathEQ applies the EQ predicate on the "Path" field.
func PathEQ(v string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPath), v))
	})
}

// PathNEQ applies the NEQ predicate on the "Path" field.
func PathNEQ(v string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPath), v))
	})
}

// PathIn applies the In predicate on the "Path" field.
func PathIn(vs ...string) predicate.SysCasbinRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPath), v...))
	})
}

// PathNotIn applies the NotIn predicate on the "Path" field.
func PathNotIn(vs ...string) predicate.SysCasbinRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPath), v...))
	})
}

// PathGT applies the GT predicate on the "Path" field.
func PathGT(v string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPath), v))
	})
}

// PathGTE applies the GTE predicate on the "Path" field.
func PathGTE(v string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPath), v))
	})
}

// PathLT applies the LT predicate on the "Path" field.
func PathLT(v string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPath), v))
	})
}

// PathLTE applies the LTE predicate on the "Path" field.
func PathLTE(v string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPath), v))
	})
}

// PathContains applies the Contains predicate on the "Path" field.
func PathContains(v string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPath), v))
	})
}

// PathHasPrefix applies the HasPrefix predicate on the "Path" field.
func PathHasPrefix(v string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPath), v))
	})
}

// PathHasSuffix applies the HasSuffix predicate on the "Path" field.
func PathHasSuffix(v string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPath), v))
	})
}

// PathIsNil applies the IsNil predicate on the "Path" field.
func PathIsNil() predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPath)))
	})
}

// PathNotNil applies the NotNil predicate on the "Path" field.
func PathNotNil() predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPath)))
	})
}

// PathEqualFold applies the EqualFold predicate on the "Path" field.
func PathEqualFold(v string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPath), v))
	})
}

// PathContainsFold applies the ContainsFold predicate on the "Path" field.
func PathContainsFold(v string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPath), v))
	})
}

// MethodEQ applies the EQ predicate on the "Method" field.
func MethodEQ(v string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMethod), v))
	})
}

// MethodNEQ applies the NEQ predicate on the "Method" field.
func MethodNEQ(v string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMethod), v))
	})
}

// MethodIn applies the In predicate on the "Method" field.
func MethodIn(vs ...string) predicate.SysCasbinRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMethod), v...))
	})
}

// MethodNotIn applies the NotIn predicate on the "Method" field.
func MethodNotIn(vs ...string) predicate.SysCasbinRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMethod), v...))
	})
}

// MethodGT applies the GT predicate on the "Method" field.
func MethodGT(v string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMethod), v))
	})
}

// MethodGTE applies the GTE predicate on the "Method" field.
func MethodGTE(v string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMethod), v))
	})
}

// MethodLT applies the LT predicate on the "Method" field.
func MethodLT(v string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMethod), v))
	})
}

// MethodLTE applies the LTE predicate on the "Method" field.
func MethodLTE(v string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMethod), v))
	})
}

// MethodContains applies the Contains predicate on the "Method" field.
func MethodContains(v string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMethod), v))
	})
}

// MethodHasPrefix applies the HasPrefix predicate on the "Method" field.
func MethodHasPrefix(v string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMethod), v))
	})
}

// MethodHasSuffix applies the HasSuffix predicate on the "Method" field.
func MethodHasSuffix(v string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMethod), v))
	})
}

// MethodIsNil applies the IsNil predicate on the "Method" field.
func MethodIsNil() predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMethod)))
	})
}

// MethodNotNil applies the NotNil predicate on the "Method" field.
func MethodNotNil() predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMethod)))
	})
}

// MethodEqualFold applies the EqualFold predicate on the "Method" field.
func MethodEqualFold(v string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMethod), v))
	})
}

// MethodContainsFold applies the ContainsFold predicate on the "Method" field.
func MethodContainsFold(v string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMethod), v))
	})
}

// V3EQ applies the EQ predicate on the "v3" field.
func V3EQ(v string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldV3), v))
	})
}

// V3NEQ applies the NEQ predicate on the "v3" field.
func V3NEQ(v string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldV3), v))
	})
}

// V3In applies the In predicate on the "v3" field.
func V3In(vs ...string) predicate.SysCasbinRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldV3), v...))
	})
}

// V3NotIn applies the NotIn predicate on the "v3" field.
func V3NotIn(vs ...string) predicate.SysCasbinRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldV3), v...))
	})
}

// V3GT applies the GT predicate on the "v3" field.
func V3GT(v string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldV3), v))
	})
}

// V3GTE applies the GTE predicate on the "v3" field.
func V3GTE(v string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldV3), v))
	})
}

// V3LT applies the LT predicate on the "v3" field.
func V3LT(v string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldV3), v))
	})
}

// V3LTE applies the LTE predicate on the "v3" field.
func V3LTE(v string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldV3), v))
	})
}

// V3Contains applies the Contains predicate on the "v3" field.
func V3Contains(v string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldV3), v))
	})
}

// V3HasPrefix applies the HasPrefix predicate on the "v3" field.
func V3HasPrefix(v string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldV3), v))
	})
}

// V3HasSuffix applies the HasSuffix predicate on the "v3" field.
func V3HasSuffix(v string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldV3), v))
	})
}

// V3IsNil applies the IsNil predicate on the "v3" field.
func V3IsNil() predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldV3)))
	})
}

// V3NotNil applies the NotNil predicate on the "v3" field.
func V3NotNil() predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldV3)))
	})
}

// V3EqualFold applies the EqualFold predicate on the "v3" field.
func V3EqualFold(v string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldV3), v))
	})
}

// V3ContainsFold applies the ContainsFold predicate on the "v3" field.
func V3ContainsFold(v string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldV3), v))
	})
}

// V4EQ applies the EQ predicate on the "v4" field.
func V4EQ(v string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldV4), v))
	})
}

// V4NEQ applies the NEQ predicate on the "v4" field.
func V4NEQ(v string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldV4), v))
	})
}

// V4In applies the In predicate on the "v4" field.
func V4In(vs ...string) predicate.SysCasbinRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldV4), v...))
	})
}

// V4NotIn applies the NotIn predicate on the "v4" field.
func V4NotIn(vs ...string) predicate.SysCasbinRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldV4), v...))
	})
}

// V4GT applies the GT predicate on the "v4" field.
func V4GT(v string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldV4), v))
	})
}

// V4GTE applies the GTE predicate on the "v4" field.
func V4GTE(v string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldV4), v))
	})
}

// V4LT applies the LT predicate on the "v4" field.
func V4LT(v string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldV4), v))
	})
}

// V4LTE applies the LTE predicate on the "v4" field.
func V4LTE(v string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldV4), v))
	})
}

// V4Contains applies the Contains predicate on the "v4" field.
func V4Contains(v string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldV4), v))
	})
}

// V4HasPrefix applies the HasPrefix predicate on the "v4" field.
func V4HasPrefix(v string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldV4), v))
	})
}

// V4HasSuffix applies the HasSuffix predicate on the "v4" field.
func V4HasSuffix(v string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldV4), v))
	})
}

// V4IsNil applies the IsNil predicate on the "v4" field.
func V4IsNil() predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldV4)))
	})
}

// V4NotNil applies the NotNil predicate on the "v4" field.
func V4NotNil() predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldV4)))
	})
}

// V4EqualFold applies the EqualFold predicate on the "v4" field.
func V4EqualFold(v string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldV4), v))
	})
}

// V4ContainsFold applies the ContainsFold predicate on the "v4" field.
func V4ContainsFold(v string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldV4), v))
	})
}

// V5EQ applies the EQ predicate on the "v5" field.
func V5EQ(v string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldV5), v))
	})
}

// V5NEQ applies the NEQ predicate on the "v5" field.
func V5NEQ(v string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldV5), v))
	})
}

// V5In applies the In predicate on the "v5" field.
func V5In(vs ...string) predicate.SysCasbinRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldV5), v...))
	})
}

// V5NotIn applies the NotIn predicate on the "v5" field.
func V5NotIn(vs ...string) predicate.SysCasbinRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldV5), v...))
	})
}

// V5GT applies the GT predicate on the "v5" field.
func V5GT(v string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldV5), v))
	})
}

// V5GTE applies the GTE predicate on the "v5" field.
func V5GTE(v string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldV5), v))
	})
}

// V5LT applies the LT predicate on the "v5" field.
func V5LT(v string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldV5), v))
	})
}

// V5LTE applies the LTE predicate on the "v5" field.
func V5LTE(v string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldV5), v))
	})
}

// V5Contains applies the Contains predicate on the "v5" field.
func V5Contains(v string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldV5), v))
	})
}

// V5HasPrefix applies the HasPrefix predicate on the "v5" field.
func V5HasPrefix(v string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldV5), v))
	})
}

// V5HasSuffix applies the HasSuffix predicate on the "v5" field.
func V5HasSuffix(v string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldV5), v))
	})
}

// V5IsNil applies the IsNil predicate on the "v5" field.
func V5IsNil() predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldV5)))
	})
}

// V5NotNil applies the NotNil predicate on the "v5" field.
func V5NotNil() predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldV5)))
	})
}

// V5EqualFold applies the EqualFold predicate on the "v5" field.
func V5EqualFold(v string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldV5), v))
	})
}

// V5ContainsFold applies the ContainsFold predicate on the "v5" field.
func V5ContainsFold(v string) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldV5), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SysCasbinRule) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SysCasbinRule) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SysCasbinRule) predicate.SysCasbinRule {
	return predicate.SysCasbinRule(func(s *sql.Selector) {
		p(s.Not())
	})
}
