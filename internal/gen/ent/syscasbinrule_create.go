// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/wanhello/omgind/internal/gen/ent/syscasbinrule"
)

// SysCasbinRuleCreate is the builder for creating a SysCasbinRule entity.
type SysCasbinRuleCreate struct {
	config
	mutation *SysCasbinRuleMutation
	hooks    []Hook
}

// SetIsDel sets the "is_del" field.
func (scrc *SysCasbinRuleCreate) SetIsDel(b bool) *SysCasbinRuleCreate {
	scrc.mutation.SetIsDel(b)
	return scrc
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (scrc *SysCasbinRuleCreate) SetNillableIsDel(b *bool) *SysCasbinRuleCreate {
	if b != nil {
		scrc.SetIsDel(*b)
	}
	return scrc
}

// SetSort sets the "sort" field.
func (scrc *SysCasbinRuleCreate) SetSort(i int32) *SysCasbinRuleCreate {
	scrc.mutation.SetSort(i)
	return scrc
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (scrc *SysCasbinRuleCreate) SetNillableSort(i *int32) *SysCasbinRuleCreate {
	if i != nil {
		scrc.SetSort(*i)
	}
	return scrc
}

// SetCreatedAt sets the "created_at" field.
func (scrc *SysCasbinRuleCreate) SetCreatedAt(t time.Time) *SysCasbinRuleCreate {
	scrc.mutation.SetCreatedAt(t)
	return scrc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (scrc *SysCasbinRuleCreate) SetNillableCreatedAt(t *time.Time) *SysCasbinRuleCreate {
	if t != nil {
		scrc.SetCreatedAt(*t)
	}
	return scrc
}

// SetUpdatedAt sets the "updated_at" field.
func (scrc *SysCasbinRuleCreate) SetUpdatedAt(t time.Time) *SysCasbinRuleCreate {
	scrc.mutation.SetUpdatedAt(t)
	return scrc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (scrc *SysCasbinRuleCreate) SetNillableUpdatedAt(t *time.Time) *SysCasbinRuleCreate {
	if t != nil {
		scrc.SetUpdatedAt(*t)
	}
	return scrc
}

// SetDeletedAt sets the "deleted_at" field.
func (scrc *SysCasbinRuleCreate) SetDeletedAt(t time.Time) *SysCasbinRuleCreate {
	scrc.mutation.SetDeletedAt(t)
	return scrc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (scrc *SysCasbinRuleCreate) SetNillableDeletedAt(t *time.Time) *SysCasbinRuleCreate {
	if t != nil {
		scrc.SetDeletedAt(*t)
	}
	return scrc
}

// SetPType sets the "PType" field.
func (scrc *SysCasbinRuleCreate) SetPType(s string) *SysCasbinRuleCreate {
	scrc.mutation.SetPType(s)
	return scrc
}

// SetNillablePType sets the "PType" field if the given value is not nil.
func (scrc *SysCasbinRuleCreate) SetNillablePType(s *string) *SysCasbinRuleCreate {
	if s != nil {
		scrc.SetPType(*s)
	}
	return scrc
}

// SetRoleID sets the "RoleID" field.
func (scrc *SysCasbinRuleCreate) SetRoleID(s string) *SysCasbinRuleCreate {
	scrc.mutation.SetRoleID(s)
	return scrc
}

// SetNillableRoleID sets the "RoleID" field if the given value is not nil.
func (scrc *SysCasbinRuleCreate) SetNillableRoleID(s *string) *SysCasbinRuleCreate {
	if s != nil {
		scrc.SetRoleID(*s)
	}
	return scrc
}

// SetPath sets the "Path" field.
func (scrc *SysCasbinRuleCreate) SetPath(s string) *SysCasbinRuleCreate {
	scrc.mutation.SetPath(s)
	return scrc
}

// SetNillablePath sets the "Path" field if the given value is not nil.
func (scrc *SysCasbinRuleCreate) SetNillablePath(s *string) *SysCasbinRuleCreate {
	if s != nil {
		scrc.SetPath(*s)
	}
	return scrc
}

// SetMethod sets the "Method" field.
func (scrc *SysCasbinRuleCreate) SetMethod(s string) *SysCasbinRuleCreate {
	scrc.mutation.SetMethod(s)
	return scrc
}

// SetNillableMethod sets the "Method" field if the given value is not nil.
func (scrc *SysCasbinRuleCreate) SetNillableMethod(s *string) *SysCasbinRuleCreate {
	if s != nil {
		scrc.SetMethod(*s)
	}
	return scrc
}

// SetV3 sets the "v3" field.
func (scrc *SysCasbinRuleCreate) SetV3(s string) *SysCasbinRuleCreate {
	scrc.mutation.SetV3(s)
	return scrc
}

// SetNillableV3 sets the "v3" field if the given value is not nil.
func (scrc *SysCasbinRuleCreate) SetNillableV3(s *string) *SysCasbinRuleCreate {
	if s != nil {
		scrc.SetV3(*s)
	}
	return scrc
}

// SetV4 sets the "v4" field.
func (scrc *SysCasbinRuleCreate) SetV4(s string) *SysCasbinRuleCreate {
	scrc.mutation.SetV4(s)
	return scrc
}

// SetNillableV4 sets the "v4" field if the given value is not nil.
func (scrc *SysCasbinRuleCreate) SetNillableV4(s *string) *SysCasbinRuleCreate {
	if s != nil {
		scrc.SetV4(*s)
	}
	return scrc
}

// SetV5 sets the "v5" field.
func (scrc *SysCasbinRuleCreate) SetV5(s string) *SysCasbinRuleCreate {
	scrc.mutation.SetV5(s)
	return scrc
}

// SetNillableV5 sets the "v5" field if the given value is not nil.
func (scrc *SysCasbinRuleCreate) SetNillableV5(s *string) *SysCasbinRuleCreate {
	if s != nil {
		scrc.SetV5(*s)
	}
	return scrc
}

// SetID sets the "id" field.
func (scrc *SysCasbinRuleCreate) SetID(s string) *SysCasbinRuleCreate {
	scrc.mutation.SetID(s)
	return scrc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (scrc *SysCasbinRuleCreate) SetNillableID(s *string) *SysCasbinRuleCreate {
	if s != nil {
		scrc.SetID(*s)
	}
	return scrc
}

// Mutation returns the SysCasbinRuleMutation object of the builder.
func (scrc *SysCasbinRuleCreate) Mutation() *SysCasbinRuleMutation {
	return scrc.mutation
}

// Save creates the SysCasbinRule in the database.
func (scrc *SysCasbinRuleCreate) Save(ctx context.Context) (*SysCasbinRule, error) {
	var (
		err  error
		node *SysCasbinRule
	)
	scrc.defaults()
	if len(scrc.hooks) == 0 {
		if err = scrc.check(); err != nil {
			return nil, err
		}
		node, err = scrc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SysCasbinRuleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = scrc.check(); err != nil {
				return nil, err
			}
			scrc.mutation = mutation
			node, err = scrc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(scrc.hooks) - 1; i >= 0; i-- {
			mut = scrc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, scrc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (scrc *SysCasbinRuleCreate) SaveX(ctx context.Context) *SysCasbinRule {
	v, err := scrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (scrc *SysCasbinRuleCreate) defaults() {
	if _, ok := scrc.mutation.IsDel(); !ok {
		v := syscasbinrule.DefaultIsDel
		scrc.mutation.SetIsDel(v)
	}
	if _, ok := scrc.mutation.Sort(); !ok {
		v := syscasbinrule.DefaultSort
		scrc.mutation.SetSort(v)
	}
	if _, ok := scrc.mutation.CreatedAt(); !ok {
		v := syscasbinrule.DefaultCreatedAt()
		scrc.mutation.SetCreatedAt(v)
	}
	if _, ok := scrc.mutation.UpdatedAt(); !ok {
		v := syscasbinrule.DefaultUpdatedAt()
		scrc.mutation.SetUpdatedAt(v)
	}
	if _, ok := scrc.mutation.ID(); !ok {
		v := syscasbinrule.DefaultID
		scrc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scrc *SysCasbinRuleCreate) check() error {
	if _, ok := scrc.mutation.IsDel(); !ok {
		return &ValidationError{Name: "is_del", err: errors.New("ent: missing required field \"is_del\"")}
	}
	if _, ok := scrc.mutation.Sort(); !ok {
		return &ValidationError{Name: "sort", err: errors.New("ent: missing required field \"sort\"")}
	}
	if _, ok := scrc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New("ent: missing required field \"created_at\"")}
	}
	if _, ok := scrc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New("ent: missing required field \"updated_at\"")}
	}
	if v, ok := scrc.mutation.PType(); ok {
		if err := syscasbinrule.PTypeValidator(v); err != nil {
			return &ValidationError{Name: "PType", err: fmt.Errorf("ent: validator failed for field \"PType\": %w", err)}
		}
	}
	if v, ok := scrc.mutation.RoleID(); ok {
		if err := syscasbinrule.RoleIDValidator(v); err != nil {
			return &ValidationError{Name: "RoleID", err: fmt.Errorf("ent: validator failed for field \"RoleID\": %w", err)}
		}
	}
	if v, ok := scrc.mutation.Path(); ok {
		if err := syscasbinrule.PathValidator(v); err != nil {
			return &ValidationError{Name: "Path", err: fmt.Errorf("ent: validator failed for field \"Path\": %w", err)}
		}
	}
	if v, ok := scrc.mutation.Method(); ok {
		if err := syscasbinrule.MethodValidator(v); err != nil {
			return &ValidationError{Name: "Method", err: fmt.Errorf("ent: validator failed for field \"Method\": %w", err)}
		}
	}
	if v, ok := scrc.mutation.V3(); ok {
		if err := syscasbinrule.V3Validator(v); err != nil {
			return &ValidationError{Name: "v3", err: fmt.Errorf("ent: validator failed for field \"v3\": %w", err)}
		}
	}
	if v, ok := scrc.mutation.V4(); ok {
		if err := syscasbinrule.V4Validator(v); err != nil {
			return &ValidationError{Name: "v4", err: fmt.Errorf("ent: validator failed for field \"v4\": %w", err)}
		}
	}
	if v, ok := scrc.mutation.V5(); ok {
		if err := syscasbinrule.V5Validator(v); err != nil {
			return &ValidationError{Name: "v5", err: fmt.Errorf("ent: validator failed for field \"v5\": %w", err)}
		}
	}
	if v, ok := scrc.mutation.ID(); ok {
		if err := syscasbinrule.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf("ent: validator failed for field \"id\": %w", err)}
		}
	}
	return nil
}

func (scrc *SysCasbinRuleCreate) sqlSave(ctx context.Context) (*SysCasbinRule, error) {
	_node, _spec := scrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, scrc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

func (scrc *SysCasbinRuleCreate) createSpec() (*SysCasbinRule, *sqlgraph.CreateSpec) {
	var (
		_node = &SysCasbinRule{config: scrc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: syscasbinrule.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: syscasbinrule.FieldID,
			},
		}
	)
	if id, ok := scrc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := scrc.mutation.IsDel(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: syscasbinrule.FieldIsDel,
		})
		_node.IsDel = value
	}
	if value, ok := scrc.mutation.Sort(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: syscasbinrule.FieldSort,
		})
		_node.Sort = value
	}
	if value, ok := scrc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: syscasbinrule.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := scrc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: syscasbinrule.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := scrc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: syscasbinrule.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if value, ok := scrc.mutation.PType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: syscasbinrule.FieldPType,
		})
		_node.PType = &value
	}
	if value, ok := scrc.mutation.RoleID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: syscasbinrule.FieldRoleID,
		})
		_node.RoleID = &value
	}
	if value, ok := scrc.mutation.Path(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: syscasbinrule.FieldPath,
		})
		_node.Path = &value
	}
	if value, ok := scrc.mutation.Method(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: syscasbinrule.FieldMethod,
		})
		_node.Method = &value
	}
	if value, ok := scrc.mutation.V3(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: syscasbinrule.FieldV3,
		})
		_node.V3 = &value
	}
	if value, ok := scrc.mutation.V4(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: syscasbinrule.FieldV4,
		})
		_node.V4 = &value
	}
	if value, ok := scrc.mutation.V5(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: syscasbinrule.FieldV5,
		})
		_node.V5 = &value
	}
	return _node, _spec
}

// SysCasbinRuleCreateBulk is the builder for creating many SysCasbinRule entities in bulk.
type SysCasbinRuleCreateBulk struct {
	config
	builders []*SysCasbinRuleCreate
}

// Save creates the SysCasbinRule entities in the database.
func (scrcb *SysCasbinRuleCreateBulk) Save(ctx context.Context) ([]*SysCasbinRule, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scrcb.builders))
	nodes := make([]*SysCasbinRule, len(scrcb.builders))
	mutators := make([]Mutator, len(scrcb.builders))
	for i := range scrcb.builders {
		func(i int, root context.Context) {
			builder := scrcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SysCasbinRuleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scrcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scrcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scrcb *SysCasbinRuleCreateBulk) SaveX(ctx context.Context) []*SysCasbinRule {
	v, err := scrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
