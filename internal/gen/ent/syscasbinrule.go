// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/wanhello/omgind/internal/gen/ent/syscasbinrule"
)

// SysCasbinRule is the model entity for the SysCasbinRule schema.
type SysCasbinRule struct {
	config `json:"-"`
	// ID of the ent.
	// 主键
	ID string `json:"id,omitempty"`
	// IsDel holds the value of the "is_del" field.
	// 是否删除
	IsDel bool `json:"is_del,omitempty"`
	// Sort holds the value of the "sort" field.
	// 排序, 在数据库里的排序
	Sort int32 `json:"sort,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	// 创建时间,由程序自动生成
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	// 更新时间,由程序自动生成
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	// 删除时间,
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// PType holds the value of the "PType" field.
	// 规则类型
	PType *string `json:"p_type,omitempty"`
	// RoleID holds the value of the "RoleID" field.
	// 角色ID
	RoleID *string `json:"v0,omitempty"`
	// Path holds the value of the "Path" field.
	// api路径
	Path *string `json:"v1,omitempty"`
	// Method holds the value of the "Method" field.
	// api访问方法
	Method *string `json:"v2,omitempty"`
	// V3 holds the value of the "v3" field.
	V3 *string `json:"v3,omitempty"`
	// V4 holds the value of the "v4" field.
	V4 *string `json:"v4,omitempty"`
	// V5 holds the value of the "v5" field.
	V5 *string `json:"v5,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SysCasbinRule) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case syscasbinrule.FieldIsDel:
			values[i] = new(sql.NullBool)
		case syscasbinrule.FieldSort:
			values[i] = new(sql.NullInt64)
		case syscasbinrule.FieldID, syscasbinrule.FieldPType, syscasbinrule.FieldRoleID, syscasbinrule.FieldPath, syscasbinrule.FieldMethod, syscasbinrule.FieldV3, syscasbinrule.FieldV4, syscasbinrule.FieldV5:
			values[i] = new(sql.NullString)
		case syscasbinrule.FieldCreatedAt, syscasbinrule.FieldUpdatedAt, syscasbinrule.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type SysCasbinRule", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SysCasbinRule fields.
func (scr *SysCasbinRule) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case syscasbinrule.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				scr.ID = value.String
			}
		case syscasbinrule.FieldIsDel:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_del", values[i])
			} else if value.Valid {
				scr.IsDel = value.Bool
			}
		case syscasbinrule.FieldSort:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sort", values[i])
			} else if value.Valid {
				scr.Sort = int32(value.Int64)
			}
		case syscasbinrule.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				scr.CreatedAt = value.Time
			}
		case syscasbinrule.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				scr.UpdatedAt = value.Time
			}
		case syscasbinrule.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				scr.DeletedAt = new(time.Time)
				*scr.DeletedAt = value.Time
			}
		case syscasbinrule.FieldPType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field PType", values[i])
			} else if value.Valid {
				scr.PType = new(string)
				*scr.PType = value.String
			}
		case syscasbinrule.FieldRoleID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field RoleID", values[i])
			} else if value.Valid {
				scr.RoleID = new(string)
				*scr.RoleID = value.String
			}
		case syscasbinrule.FieldPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Path", values[i])
			} else if value.Valid {
				scr.Path = new(string)
				*scr.Path = value.String
			}
		case syscasbinrule.FieldMethod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Method", values[i])
			} else if value.Valid {
				scr.Method = new(string)
				*scr.Method = value.String
			}
		case syscasbinrule.FieldV3:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field v3", values[i])
			} else if value.Valid {
				scr.V3 = new(string)
				*scr.V3 = value.String
			}
		case syscasbinrule.FieldV4:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field v4", values[i])
			} else if value.Valid {
				scr.V4 = new(string)
				*scr.V4 = value.String
			}
		case syscasbinrule.FieldV5:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field v5", values[i])
			} else if value.Valid {
				scr.V5 = new(string)
				*scr.V5 = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this SysCasbinRule.
// Note that you need to call SysCasbinRule.Unwrap() before calling this method if this SysCasbinRule
// was returned from a transaction, and the transaction was committed or rolled back.
func (scr *SysCasbinRule) Update() *SysCasbinRuleUpdateOne {
	return (&SysCasbinRuleClient{config: scr.config}).UpdateOne(scr)
}

// Unwrap unwraps the SysCasbinRule entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (scr *SysCasbinRule) Unwrap() *SysCasbinRule {
	tx, ok := scr.config.driver.(*txDriver)
	if !ok {
		panic("ent: SysCasbinRule is not a transactional entity")
	}
	scr.config.driver = tx.drv
	return scr
}

// String implements the fmt.Stringer.
func (scr *SysCasbinRule) String() string {
	var builder strings.Builder
	builder.WriteString("SysCasbinRule(")
	builder.WriteString(fmt.Sprintf("id=%v", scr.ID))
	builder.WriteString(", is_del=")
	builder.WriteString(fmt.Sprintf("%v", scr.IsDel))
	builder.WriteString(", sort=")
	builder.WriteString(fmt.Sprintf("%v", scr.Sort))
	builder.WriteString(", created_at=")
	builder.WriteString(scr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(scr.UpdatedAt.Format(time.ANSIC))
	if v := scr.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := scr.PType; v != nil {
		builder.WriteString(", PType=")
		builder.WriteString(*v)
	}
	if v := scr.RoleID; v != nil {
		builder.WriteString(", RoleID=")
		builder.WriteString(*v)
	}
	if v := scr.Path; v != nil {
		builder.WriteString(", Path=")
		builder.WriteString(*v)
	}
	if v := scr.Method; v != nil {
		builder.WriteString(", Method=")
		builder.WriteString(*v)
	}
	if v := scr.V3; v != nil {
		builder.WriteString(", v3=")
		builder.WriteString(*v)
	}
	if v := scr.V4; v != nil {
		builder.WriteString(", v4=")
		builder.WriteString(*v)
	}
	if v := scr.V5; v != nil {
		builder.WriteString(", v5=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// SysCasbinRules is a parsable slice of SysCasbinRule.
type SysCasbinRules []*SysCasbinRule

func (scr SysCasbinRules) config(cfg config) {
	for _i := range scr {
		scr[_i].config = cfg
	}
}
