// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/wanhello/omgind/internal/gen/ent/predicate"
	"github.com/wanhello/omgind/internal/gen/ent/sysdictdetail"
)

// SysDictDetailQuery is the builder for querying SysDictDetail entities.
type SysDictDetailQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.SysDictDetail
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the SysDictDetailQuery builder.
func (sddq *SysDictDetailQuery) Where(ps ...predicate.SysDictDetail) *SysDictDetailQuery {
	sddq.predicates = append(sddq.predicates, ps...)
	return sddq
}

// Limit adds a limit step to the query.
func (sddq *SysDictDetailQuery) Limit(limit int) *SysDictDetailQuery {
	sddq.limit = &limit
	return sddq
}

// Offset adds an offset step to the query.
func (sddq *SysDictDetailQuery) Offset(offset int) *SysDictDetailQuery {
	sddq.offset = &offset
	return sddq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (sddq *SysDictDetailQuery) Unique(unique bool) *SysDictDetailQuery {
	sddq.unique = &unique
	return sddq
}

// Order adds an order step to the query.
func (sddq *SysDictDetailQuery) Order(o ...OrderFunc) *SysDictDetailQuery {
	sddq.order = append(sddq.order, o...)
	return sddq
}

// First returns the first SysDictDetail entity from the query.
// Returns a *NotFoundError when no SysDictDetail was found.
func (sddq *SysDictDetailQuery) First(ctx context.Context) (*SysDictDetail, error) {
	nodes, err := sddq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{sysdictdetail.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (sddq *SysDictDetailQuery) FirstX(ctx context.Context) *SysDictDetail {
	node, err := sddq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first SysDictDetail ID from the query.
// Returns a *NotFoundError when no SysDictDetail ID was found.
func (sddq *SysDictDetailQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = sddq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{sysdictdetail.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (sddq *SysDictDetailQuery) FirstIDX(ctx context.Context) int {
	id, err := sddq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single SysDictDetail entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one SysDictDetail entity is not found.
// Returns a *NotFoundError when no SysDictDetail entities are found.
func (sddq *SysDictDetailQuery) Only(ctx context.Context) (*SysDictDetail, error) {
	nodes, err := sddq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{sysdictdetail.Label}
	default:
		return nil, &NotSingularError{sysdictdetail.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (sddq *SysDictDetailQuery) OnlyX(ctx context.Context) *SysDictDetail {
	node, err := sddq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only SysDictDetail ID in the query.
// Returns a *NotSingularError when exactly one SysDictDetail ID is not found.
// Returns a *NotFoundError when no entities are found.
func (sddq *SysDictDetailQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = sddq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{sysdictdetail.Label}
	default:
		err = &NotSingularError{sysdictdetail.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (sddq *SysDictDetailQuery) OnlyIDX(ctx context.Context) int {
	id, err := sddq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of SysDictDetails.
func (sddq *SysDictDetailQuery) All(ctx context.Context) ([]*SysDictDetail, error) {
	if err := sddq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return sddq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (sddq *SysDictDetailQuery) AllX(ctx context.Context) []*SysDictDetail {
	nodes, err := sddq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of SysDictDetail IDs.
func (sddq *SysDictDetailQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := sddq.Select(sysdictdetail.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (sddq *SysDictDetailQuery) IDsX(ctx context.Context) []int {
	ids, err := sddq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (sddq *SysDictDetailQuery) Count(ctx context.Context) (int, error) {
	if err := sddq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return sddq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (sddq *SysDictDetailQuery) CountX(ctx context.Context) int {
	count, err := sddq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (sddq *SysDictDetailQuery) Exist(ctx context.Context) (bool, error) {
	if err := sddq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return sddq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (sddq *SysDictDetailQuery) ExistX(ctx context.Context) bool {
	exist, err := sddq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the SysDictDetailQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (sddq *SysDictDetailQuery) Clone() *SysDictDetailQuery {
	if sddq == nil {
		return nil
	}
	return &SysDictDetailQuery{
		config:     sddq.config,
		limit:      sddq.limit,
		offset:     sddq.offset,
		order:      append([]OrderFunc{}, sddq.order...),
		predicates: append([]predicate.SysDictDetail{}, sddq.predicates...),
		// clone intermediate query.
		sql:  sddq.sql.Clone(),
		path: sddq.path,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
func (sddq *SysDictDetailQuery) GroupBy(field string, fields ...string) *SysDictDetailGroupBy {
	group := &SysDictDetailGroupBy{config: sddq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := sddq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return sddq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
func (sddq *SysDictDetailQuery) Select(field string, fields ...string) *SysDictDetailSelect {
	sddq.fields = append([]string{field}, fields...)
	return &SysDictDetailSelect{SysDictDetailQuery: sddq}
}

func (sddq *SysDictDetailQuery) prepareQuery(ctx context.Context) error {
	for _, f := range sddq.fields {
		if !sysdictdetail.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if sddq.path != nil {
		prev, err := sddq.path(ctx)
		if err != nil {
			return err
		}
		sddq.sql = prev
	}
	return nil
}

func (sddq *SysDictDetailQuery) sqlAll(ctx context.Context) ([]*SysDictDetail, error) {
	var (
		nodes = []*SysDictDetail{}
		_spec = sddq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &SysDictDetail{config: sddq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, sddq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (sddq *SysDictDetailQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := sddq.querySpec()
	return sqlgraph.CountNodes(ctx, sddq.driver, _spec)
}

func (sddq *SysDictDetailQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := sddq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (sddq *SysDictDetailQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   sysdictdetail.Table,
			Columns: sysdictdetail.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: sysdictdetail.FieldID,
			},
		},
		From:   sddq.sql,
		Unique: true,
	}
	if unique := sddq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := sddq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sysdictdetail.FieldID)
		for i := range fields {
			if fields[i] != sysdictdetail.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := sddq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := sddq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := sddq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := sddq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (sddq *SysDictDetailQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(sddq.driver.Dialect())
	t1 := builder.Table(sysdictdetail.Table)
	selector := builder.Select(t1.Columns(sysdictdetail.Columns...)...).From(t1)
	if sddq.sql != nil {
		selector = sddq.sql
		selector.Select(selector.Columns(sysdictdetail.Columns...)...)
	}
	for _, p := range sddq.predicates {
		p(selector)
	}
	for _, p := range sddq.order {
		p(selector)
	}
	if offset := sddq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := sddq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// SysDictDetailGroupBy is the group-by builder for SysDictDetail entities.
type SysDictDetailGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (sddgb *SysDictDetailGroupBy) Aggregate(fns ...AggregateFunc) *SysDictDetailGroupBy {
	sddgb.fns = append(sddgb.fns, fns...)
	return sddgb
}

// Scan applies the group-by query and scans the result into the given value.
func (sddgb *SysDictDetailGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := sddgb.path(ctx)
	if err != nil {
		return err
	}
	sddgb.sql = query
	return sddgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (sddgb *SysDictDetailGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := sddgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (sddgb *SysDictDetailGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(sddgb.fields) > 1 {
		return nil, errors.New("ent: SysDictDetailGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := sddgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (sddgb *SysDictDetailGroupBy) StringsX(ctx context.Context) []string {
	v, err := sddgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (sddgb *SysDictDetailGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = sddgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{sysdictdetail.Label}
	default:
		err = fmt.Errorf("ent: SysDictDetailGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (sddgb *SysDictDetailGroupBy) StringX(ctx context.Context) string {
	v, err := sddgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (sddgb *SysDictDetailGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(sddgb.fields) > 1 {
		return nil, errors.New("ent: SysDictDetailGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := sddgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (sddgb *SysDictDetailGroupBy) IntsX(ctx context.Context) []int {
	v, err := sddgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (sddgb *SysDictDetailGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = sddgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{sysdictdetail.Label}
	default:
		err = fmt.Errorf("ent: SysDictDetailGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (sddgb *SysDictDetailGroupBy) IntX(ctx context.Context) int {
	v, err := sddgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (sddgb *SysDictDetailGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(sddgb.fields) > 1 {
		return nil, errors.New("ent: SysDictDetailGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := sddgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (sddgb *SysDictDetailGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := sddgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (sddgb *SysDictDetailGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = sddgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{sysdictdetail.Label}
	default:
		err = fmt.Errorf("ent: SysDictDetailGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (sddgb *SysDictDetailGroupBy) Float64X(ctx context.Context) float64 {
	v, err := sddgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (sddgb *SysDictDetailGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(sddgb.fields) > 1 {
		return nil, errors.New("ent: SysDictDetailGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := sddgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (sddgb *SysDictDetailGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := sddgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (sddgb *SysDictDetailGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = sddgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{sysdictdetail.Label}
	default:
		err = fmt.Errorf("ent: SysDictDetailGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (sddgb *SysDictDetailGroupBy) BoolX(ctx context.Context) bool {
	v, err := sddgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (sddgb *SysDictDetailGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range sddgb.fields {
		if !sysdictdetail.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := sddgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sddgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (sddgb *SysDictDetailGroupBy) sqlQuery() *sql.Selector {
	selector := sddgb.sql
	columns := make([]string, 0, len(sddgb.fields)+len(sddgb.fns))
	columns = append(columns, sddgb.fields...)
	for _, fn := range sddgb.fns {
		columns = append(columns, fn(selector))
	}
	return selector.Select(columns...).GroupBy(sddgb.fields...)
}

// SysDictDetailSelect is the builder for selecting fields of SysDictDetail entities.
type SysDictDetailSelect struct {
	*SysDictDetailQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (sdds *SysDictDetailSelect) Scan(ctx context.Context, v interface{}) error {
	if err := sdds.prepareQuery(ctx); err != nil {
		return err
	}
	sdds.sql = sdds.SysDictDetailQuery.sqlQuery(ctx)
	return sdds.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (sdds *SysDictDetailSelect) ScanX(ctx context.Context, v interface{}) {
	if err := sdds.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (sdds *SysDictDetailSelect) Strings(ctx context.Context) ([]string, error) {
	if len(sdds.fields) > 1 {
		return nil, errors.New("ent: SysDictDetailSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := sdds.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (sdds *SysDictDetailSelect) StringsX(ctx context.Context) []string {
	v, err := sdds.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (sdds *SysDictDetailSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = sdds.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{sysdictdetail.Label}
	default:
		err = fmt.Errorf("ent: SysDictDetailSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (sdds *SysDictDetailSelect) StringX(ctx context.Context) string {
	v, err := sdds.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (sdds *SysDictDetailSelect) Ints(ctx context.Context) ([]int, error) {
	if len(sdds.fields) > 1 {
		return nil, errors.New("ent: SysDictDetailSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := sdds.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (sdds *SysDictDetailSelect) IntsX(ctx context.Context) []int {
	v, err := sdds.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (sdds *SysDictDetailSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = sdds.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{sysdictdetail.Label}
	default:
		err = fmt.Errorf("ent: SysDictDetailSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (sdds *SysDictDetailSelect) IntX(ctx context.Context) int {
	v, err := sdds.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (sdds *SysDictDetailSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(sdds.fields) > 1 {
		return nil, errors.New("ent: SysDictDetailSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := sdds.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (sdds *SysDictDetailSelect) Float64sX(ctx context.Context) []float64 {
	v, err := sdds.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (sdds *SysDictDetailSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = sdds.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{sysdictdetail.Label}
	default:
		err = fmt.Errorf("ent: SysDictDetailSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (sdds *SysDictDetailSelect) Float64X(ctx context.Context) float64 {
	v, err := sdds.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (sdds *SysDictDetailSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(sdds.fields) > 1 {
		return nil, errors.New("ent: SysDictDetailSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := sdds.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (sdds *SysDictDetailSelect) BoolsX(ctx context.Context) []bool {
	v, err := sdds.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (sdds *SysDictDetailSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = sdds.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{sysdictdetail.Label}
	default:
		err = fmt.Errorf("ent: SysDictDetailSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (sdds *SysDictDetailSelect) BoolX(ctx context.Context) bool {
	v, err := sdds.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (sdds *SysDictDetailSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := sdds.sqlQuery().Query()
	if err := sdds.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (sdds *SysDictDetailSelect) sqlQuery() sql.Querier {
	selector := sdds.sql
	selector.Select(selector.Columns(sdds.fields...)...)
	return selector
}
