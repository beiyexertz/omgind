// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/wanhello/omgind/internal/gen/ent/predicate"
	"github.com/wanhello/omgind/internal/gen/ent/sysmenuactionresource"
)

// SysMenuActionResourceUpdate is the builder for updating SysMenuActionResource entities.
type SysMenuActionResourceUpdate struct {
	config
	hooks    []Hook
	mutation *SysMenuActionResourceMutation
}

// Where adds a new predicate for the SysMenuActionResourceUpdate builder.
func (smaru *SysMenuActionResourceUpdate) Where(ps ...predicate.SysMenuActionResource) *SysMenuActionResourceUpdate {
	smaru.mutation.predicates = append(smaru.mutation.predicates, ps...)
	return smaru
}

// Mutation returns the SysMenuActionResourceMutation object of the builder.
func (smaru *SysMenuActionResourceUpdate) Mutation() *SysMenuActionResourceMutation {
	return smaru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (smaru *SysMenuActionResourceUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(smaru.hooks) == 0 {
		affected, err = smaru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SysMenuActionResourceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			smaru.mutation = mutation
			affected, err = smaru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(smaru.hooks) - 1; i >= 0; i-- {
			mut = smaru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, smaru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (smaru *SysMenuActionResourceUpdate) SaveX(ctx context.Context) int {
	affected, err := smaru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (smaru *SysMenuActionResourceUpdate) Exec(ctx context.Context) error {
	_, err := smaru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smaru *SysMenuActionResourceUpdate) ExecX(ctx context.Context) {
	if err := smaru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (smaru *SysMenuActionResourceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   sysmenuactionresource.Table,
			Columns: sysmenuactionresource.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: sysmenuactionresource.FieldID,
			},
		},
	}
	if ps := smaru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if n, err = sqlgraph.UpdateNodes(ctx, smaru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sysmenuactionresource.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// SysMenuActionResourceUpdateOne is the builder for updating a single SysMenuActionResource entity.
type SysMenuActionResourceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SysMenuActionResourceMutation
}

// Mutation returns the SysMenuActionResourceMutation object of the builder.
func (smaruo *SysMenuActionResourceUpdateOne) Mutation() *SysMenuActionResourceMutation {
	return smaruo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (smaruo *SysMenuActionResourceUpdateOne) Select(field string, fields ...string) *SysMenuActionResourceUpdateOne {
	smaruo.fields = append([]string{field}, fields...)
	return smaruo
}

// Save executes the query and returns the updated SysMenuActionResource entity.
func (smaruo *SysMenuActionResourceUpdateOne) Save(ctx context.Context) (*SysMenuActionResource, error) {
	var (
		err  error
		node *SysMenuActionResource
	)
	if len(smaruo.hooks) == 0 {
		node, err = smaruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SysMenuActionResourceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			smaruo.mutation = mutation
			node, err = smaruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(smaruo.hooks) - 1; i >= 0; i-- {
			mut = smaruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, smaruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (smaruo *SysMenuActionResourceUpdateOne) SaveX(ctx context.Context) *SysMenuActionResource {
	node, err := smaruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (smaruo *SysMenuActionResourceUpdateOne) Exec(ctx context.Context) error {
	_, err := smaruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smaruo *SysMenuActionResourceUpdateOne) ExecX(ctx context.Context) {
	if err := smaruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (smaruo *SysMenuActionResourceUpdateOne) sqlSave(ctx context.Context) (_node *SysMenuActionResource, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   sysmenuactionresource.Table,
			Columns: sysmenuactionresource.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: sysmenuactionresource.FieldID,
			},
		},
	}
	id, ok := smaruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing SysMenuActionResource.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := smaruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sysmenuactionresource.FieldID)
		for _, f := range fields {
			if !sysmenuactionresource.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sysmenuactionresource.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := smaruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	_node = &SysMenuActionResource{config: smaruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, smaruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sysmenuactionresource.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
