// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package app

import (
	"github.com/wanhello/omgind/internal/api/v1"
	"github.com/wanhello/omgind/internal/app/model/gormx/repo"
	"github.com/wanhello/omgind/internal/app/module/adapter"
	"github.com/wanhello/omgind/internal/app/service"
	"github.com/wanhello/omgind/internal/router"
)

import (
	_ "github.com/wanhello/omgind/internal/app/swagger"
)

// Injectors from wire.go:

// BuildInjector 生成注入器
func BuildInjector() (*Injector, func(), error) {
	auther, cleanup, err := InitAuth()
	if err != nil {
		return nil, nil, err
	}
	db, cleanup2, err := InitGormDB()
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	role := &repo.Role{
		DB: db,
	}
	roleMenu := &repo.RoleMenu{
		DB: db,
	}
	menuActionResource := &repo.MenuActionResource{
		DB: db,
	}
	user := &repo.User{
		DB: db,
	}
	userRole := &repo.UserRole{
		DB: db,
	}
	casbinAdapter := &adapter.CasbinAdapter{
		RoleModel:         role,
		RoleMenuModel:     roleMenu,
		MenuResourceModel: menuActionResource,
		UserModel:         user,
		UserRoleModel:     userRole,
	}
	syncedEnforcer, cleanup3, err := InitCasbin(casbinAdapter)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	demo := &repo.Demo{
		DB: db,
	}
	serviceDemo := &service.Demo{
		DemoModel: demo,
	}
	api_v1Demo := &api_v1.Demo{
		DemoSrv: serviceDemo,
	}
	menu := &repo.Menu{
		DB: db,
	}
	menuAction := &repo.MenuAction{
		DB: db,
	}
	cmdable, cleanup4, err := InitRedisCli()
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	vcode := InitVcode(cmdable)
	signIn := &service.SignIn{
		Auth:            auther,
		UserModel:       user,
		UserRoleModel:   userRole,
		RoleModel:       role,
		RoleMenuModel:   roleMenu,
		MenuModel:       menu,
		MenuActionModel: menuAction,
		Vcode:           vcode,
	}
	api_v1SignIn := &api_v1.SignIn{
		SigninSrv: signIn,
		Vcode:     vcode,
	}
	trans := &repo.Trans{
		DB: db,
	}
	serviceMenu := &service.Menu{
		TransModel:              trans,
		MenuModel:               menu,
		MenuActionModel:         menuAction,
		MenuActionResourceModel: menuActionResource,
	}
	api_v1Menu := &api_v1.Menu{
		MenuSrv: serviceMenu,
	}
	serviceRole := &service.Role{
		Enforcer:      syncedEnforcer,
		TransModel:    trans,
		RoleModel:     role,
		RoleMenuModel: roleMenu,
		UserModel:     user,
	}
	api_v1Role := &api_v1.Role{
		RoleSrv: serviceRole,
	}
	serviceUser := &service.User{
		Enforcer:      syncedEnforcer,
		TransModel:    trans,
		UserModel:     user,
		UserRoleModel: userRole,
		RoleModel:     role,
	}
	api_v1User := &api_v1.User{
		UserSrv: serviceUser,
	}
	dict := &repo.Dict{
		DB: db,
	}
	dictItem := &repo.DictItem{
		DB: db,
	}
	serviceDict := &service.Dict{
		TransModel:    trans,
		DictModel:     dict,
		DictItemModel: dictItem,
	}
	api_v1Dict := &api_v1.Dict{
		DictSrv: serviceDict,
	}
	routerRouter := &router.Router{
		Auth:           auther,
		CasbinEnforcer: syncedEnforcer,
		DemoAPI:        api_v1Demo,
		SignInAPI:      api_v1SignIn,
		MenuAPI:        api_v1Menu,
		RoleAPI:        api_v1Role,
		UserAPI:        api_v1User,
		DictAPI:        api_v1Dict,
	}
	engine := InitGinEngine(routerRouter)
	injector := &Injector{
		Engine:         engine,
		Auth:           auther,
		CasbinEnforcer: syncedEnforcer,
		MenuSrv:        serviceMenu,
		RedisCli:       cmdable,
	}
	return injector, func() {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}
